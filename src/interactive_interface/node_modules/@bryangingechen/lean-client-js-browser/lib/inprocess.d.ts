/// <reference types="node" />
import { Connection, Transport } from 'lean-client-js-core';
import { LeanJsUrls } from './inprocesstypes';
export interface Library {
    /**
     * Buffer containing library.zip
     */
    zipBuffer: Buffer;
    /**
     * From library.info.json, contains a map from Lean package names to
     * URL prefixes that point to the Lean source of the olean files
     */
    urls?: {};
}
export declare class InProcessTransport implements Transport {
    private loadJs;
    private memoryMB;
    private libraryZip;
    private loadOlean;
    private oleanMap;
    private info;
    constructor(loadJs: () => Promise<any>, libraryZip: Promise<Library>, memoryMB: number, loadOlean: () => Promise<any>);
    connect(): Connection;
    private getUrl(sourceFile);
    private init(emscriptenInitialized);
}
export declare function loadJsOrWasm(urls: LeanJsUrls, loadJs: (url: string) => Promise<any>): Promise<any>;
export declare function loadBufferFromURL(url: string, metaUrl: string, needUrls?: boolean): Promise<Library>;
export declare function loadBufferFromURLCached(url: string, metaUrl: string, libKey: string, dbName: string): Promise<Library>;
