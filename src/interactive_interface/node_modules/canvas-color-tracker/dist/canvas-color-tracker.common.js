'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var tinyColor = _interopDefault(require('tinycolor2'));

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var ENTROPY = 123; // Raise numbers to prevent collisions in lower indexes

var int2HexColor = function int2HexColor(num) {
  return "#".concat(Math.min(num, Math.pow(2, 24)).toString(16).padStart(6, '0'));
};

var rgb2Int = function rgb2Int(r, g, b) {
  return (r << 16) + (g << 8) + b;
};

var colorStr2Int = function colorStr2Int(str) {
  var _tinyColor$toRgb = tinyColor(str).toRgb(),
      r = _tinyColor$toRgb.r,
      g = _tinyColor$toRgb.g,
      b = _tinyColor$toRgb.b;

  return rgb2Int(r, g, b);
};

var checksum = function checksum(n, csBits) {
  return n * ENTROPY % Math.pow(2, csBits);
};

var _default = /*#__PURE__*/function () {
  function _default() {
    var csBits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;

    _classCallCheck(this, _default);

    this.csBits = csBits; // How many bits to reserve for checksum. Will eat away into the usable size of the registry.

    this.registry = ['__reserved for background__']; // indexed objects for rgb lookup;
  }

  _createClass(_default, [{
    key: "register",
    value: function register(obj) {
      if (this.registry.length >= Math.pow(2, 24 - this.csBits)) {
        // color has 24 bits (-checksum)
        return null; // Registry is full
      }

      var idx = this.registry.length;
      var cs = checksum(idx, this.csBits);
      var color = int2HexColor(idx + (cs << 24 - this.csBits));
      this.registry.push(obj);
      return color;
    }
  }, {
    key: "lookup",
    value: function lookup(color) {
      var n = typeof color === 'string' ? colorStr2Int(color) : rgb2Int.apply(void 0, _toConsumableArray(color));
      if (!n) return null; // 0 index is reserved for background

      var idx = n & Math.pow(2, 24 - this.csBits) - 1; // registry index

      var cs = n >> 24 - this.csBits & Math.pow(2, this.csBits) - 1; // extract bits reserved for checksum

      if (checksum(idx, this.csBits) !== cs || idx >= this.registry.length) return null; // failed checksum or registry out of bounds

      return this.registry[idx];
    }
  }]);

  return _default;
}();

module.exports = _default;
