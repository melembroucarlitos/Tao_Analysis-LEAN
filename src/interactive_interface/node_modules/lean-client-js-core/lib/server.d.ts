import { AllHoleCommandsRequest, AllHoleCommandsResponse, AllMessagesResponse, CheckingMode, CommandResponse, CompleteRequest, CompleteResponse, CurrentTasksResponse, FileRoi, HoleCommandsRequest, HoleCommandsResponse, HoleRequest, HoleResponse, InfoRequest, InfoResponse, Request, RoiRequest, SearchRequest, SearchResponse, SyncRequest } from './commands';
import { Event } from './event';
import { Transport, TransportError } from './transport';
export interface UnrelatedError {
    error: 'unrelated';
    message: string;
}
export declare type ServerError = TransportError | UnrelatedError;
export declare class Server {
    transport: Transport;
    error: Event<ServerError>;
    allMessages: Event<AllMessagesResponse>;
    tasks: Event<CurrentTasksResponse>;
    logMessagesToConsole: boolean;
    private currentSeqNum;
    private conn?;
    private currentMessages;
    private sentRequests;
    constructor(transport: Transport);
    connect(): void;
    restart(): void;
    send(req: InfoRequest): Promise<InfoResponse>;
    send(req: CompleteRequest): Promise<CompleteResponse>;
    send(req: SyncRequest): Promise<CommandResponse>;
    send(req: RoiRequest): Promise<CommandResponse>;
    send(req: Request): Promise<CommandResponse>;
    send(req: SearchRequest): Promise<SearchResponse>;
    send(req: HoleCommandsRequest): Promise<HoleCommandsResponse>;
    send(req: AllHoleCommandsRequest): Promise<AllHoleCommandsResponse>;
    send(req: HoleRequest): Promise<HoleResponse>;
    info(file: string, line: number, column: number): Promise<InfoResponse>;
    sync(file: string, contents: string): Promise<CommandResponse>;
    complete(file: string, line: number, column: number, skipCompletions?: boolean): Promise<CompleteResponse>;
    search(query: string): Promise<SearchResponse>;
    allHoleCommands(file: string): Promise<AllHoleCommandsResponse>;
    holeCommands(file: string, line: number, column: number): Promise<HoleCommandsResponse>;
    hole(file: string, line: number, column: number, action: string): Promise<HoleResponse>;
    roi(mode: CheckingMode, files: FileRoi[]): Promise<CommandResponse>;
    alive(): boolean;
    dispose(): void;
    private onMessage(msg);
}
